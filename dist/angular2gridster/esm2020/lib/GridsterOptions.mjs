import { of, fromEvent, merge } from 'rxjs';
import { debounceTime, map, distinctUntilChanged } from 'rxjs/operators';
export class GridsterOptions {
    constructor(config, gridsterElement) {
        this.defaults = {
            lanes: 5,
            direction: 'horizontal',
            widthHeightRatio: 1,
            shrink: false,
            responsiveView: true,
            responsiveSizes: false,
            responsiveToParent: false,
            dragAndDrop: true,
            resizable: false,
            useCSSTransforms: false,
            floating: true,
            tolerance: 'pointer'
        };
        this.responsiveOptions = [];
        this.breakpointsMap = {
            sm: 576,
            md: 768,
            lg: 992,
            xl: 1200 // Extra large
        };
        const responsiveContainer = config.responsiveToParent ? gridsterElement : window;
        this.basicOptions = config;
        this.responsiveOptions = this.extendResponsiveOptions(config.responsiveOptions || []);
        this.change = merge(of(this.getOptionsByWidth(this.getElementWidth(responsiveContainer))), fromEvent(window, 'resize').pipe(debounceTime(config.responsiveDebounce || 0), map((event) => this.getOptionsByWidth(this.getElementWidth(responsiveContainer))))).pipe(distinctUntilChanged(null, (options) => options.minWidth));
    }
    getOptionsByWidth(width) {
        let i = 0;
        let options = Object.assign({}, this.defaults, this.basicOptions);
        while (this.responsiveOptions[i]) {
            if (this.responsiveOptions[i].minWidth <= width) {
                options = this.responsiveOptions[i];
            }
            i++;
        }
        return options;
    }
    extendResponsiveOptions(responsiveOptions) {
        return responsiveOptions
            // responsive options are valid only with "breakpoint" property
            .filter(options => options.breakpoint)
            // set default minWidth if not given
            .map((options) => {
            return Object.assign({
                minWidth: this.breakpointsMap[options.breakpoint] || 0
            }, options);
        })
            .sort((curr, next) => curr.minWidth - next.minWidth)
            .map((options) => Object.assign({}, this.defaults, this.basicOptions, options));
    }
    getElementWidth($element) {
        if ($element === window) {
            return window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;
        }
        return $element.clientWidth;
    }
}
//# sourceMappingURL=data:application/json;base64,